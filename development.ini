#
# NDG OAuth Server - Pylons development environment configuration
#
# The %(here)s variable will be replaced with the parent directory of this file
#
[DEFAULT]
debug = true
# Uncomment and replace with the address which should receive any error reports
#email_to = you@yourdomain.com
smtp_server = localhost
error_email_from = paste@localhost

beakerSessionKeyName = beaker.session.oauth2server

[server:main]
use = egg:Paste#http
#host = 127.0.0.1
host = 0.0.0.0
port = 5000
ssl_pem = /home/rwilkinson_local/dev/MyProxyWebService/host0.pem

[pipeline:main]
pipeline = BeakerSessionFilter repoze_who MyProxyClient OAuth2Authz OAuth2Server

# This filter sets up a server side session linked to a cookie.  The session
# caches authentication and authorisation state information
[filter:BeakerSessionFilter]
paste.filter_app_factory = beaker.middleware:SessionMiddleware

# Cookie name
beaker.session.key = ndg.oauth.server.session

# WSGI environ key name
environ_key = %(beakerSessionKeyName)s
beaker.session.secret = somesecret
beaker.cache.data_dir = %(here)s/authn/beaker/cache
beaker.session.data_dir = %(here)s/authn/beaker/sessions

[filter:repoze_who]
use = egg:repoze.who#config
config_file = %(here)s/repoze_who.ini
log_file = stdout
log_level = debug

[filter:MyProxyClient]
paste.filter_app_factory = myproxy.server.wsgi.middleware:MyProxyClientMiddleware.filter_app_factory
# Default environ key for MyProxy client
# myproxy.client.clientEnvKeyName=myproxy.server.wsgi.middleware.MyProxyClientMiddleware.myProxyClient

# MyProxy server which this MyProxy WSGI app is a client to.  Set here to the 
# fully qualified domain name or else set the MYPROXY_SERVER environment
# variable.  See the documentation for the MyProxyClient egg for details
myproxy.client.hostname = localhost
#myproxy.client.port = 7512

# CA Certificate directory to enable this application to trust the MyProxy
# server that it fronts e.g. set to /etc/grid-security/certificates.  For these
# tests set to local ca directory
#MyProxy.client.caCertDir = %(here)s/ca
myproxy.client.caCertDir = /home/users/rwilkinson/.esg/certificates_ice

[filter:OAuth2Authz]
# Authorization filter configuration options - defaults are commented out.
paste.filter_app_factory = ndg.oauth.server.wsgi.authorization_filter:Oauth2AuthorizationMiddleware.filter_app_factory
oauth2authorization.base_url_path=/client_authorization
oauth2authorization.client_authorization_form=%(here)s/ndg/oauth/server/templates/auth_client_form.html
#oauth2authorization.client_authorizations_key=client_authorizations
oauth2authorization.client_register=%(here)s/client_register.ini
oauth2authorization.session_key_name = %(beakerSessionKeyName)s
#oauth2authorization.user_identifier_key=REMOTE_USER

[app:OAuth2Server]
paste.app_factory = ndg.oauth.server.wsgi.oauth2_server:Oauth2ServerMiddleware.app_factory

# OAuth2 server configuration options - defaults are commented out.
#oauth2server.access_token_lifetime=86400
# Allowed values: myproxy (default) or bearer (which returns a UUID for testing purposes only)
#oauth2server.access_token_type=myproxy
#oauth2server.authorization_grant_lifetime=600
oauth2server.base_url_path=/oauth
#oauth2server.certificate_request_parameter=certificate_request
# Allowed values: certificate (default) or none.
#oauth2server.client_authentication_method=certificate
#oauth2server.client_authorization_url=client_authorization/authorize
#oauth2server.client_authorizations_key=client_authorizations
oauth2server.client_register=%(here)s/client_register.ini
#oauth2server.myproxy_client_key=myproxy.server.wsgi.middleware.MyProxyClientMiddleware.myProxyClient
oauth2server.myproxy_global_password=changeme
#oauth2server.session_key_name=beaker.session.oauth2server
#oauth2server.user_identifier_key=REMOTE_USER

# Configuration of access token cache
oauth2server.cache.accesstokenregister.expire=86400
oauth2server.cache.accesstokenregister.type=file
oauth2server.cache.accesstokenregister.data_dir=%(here)s/authn/accesstokenregister
# data_dir is used if lock_dir not set:
#oauth2server.cache.accesstokenregister.lock_dir

# Configuration of authorization grant cache
oauth2server.cache.authorizationgrantregister.expire=86400
oauth2server.cache.authorizationgrantregister.type=file
oauth2server.cache.authorizationgrantregister.data_dir=%(here)s/authn/authorizationgrantregister
# data_dir is used if lock_dir not set:
#oauth2server.cache.authorizationgrantregister.lock_dir

# WARNING: *THE LINE BELOW MUST BE UNCOMMENTED ON A PRODUCTION ENVIRONMENT*
# Debug mode will enable the interactive debugging tool, allowing ANYONE to
# execute malicious code after an exception is raised.
#set debug = false


# Logging configuration
[loggers]
keys = root, routes, ndgoauthserver

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_routes]
level = INFO
handlers =
qualname = routes.middleware
# "level = DEBUG" logs the route matched and routing variables.

[logger_ndgoauthserver]
level = DEBUG
handlers =
qualname = ndg.oauth.server

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] [%(threadName)s] %(message)s
datefmt = %H:%M:%S
