#
# NDG OAuth Server - consisting of 
# * a generic OAuth Authorisation Server which authenticates users by 
#   username/password on a web form
# * a resource server.  This is a specialised one which enables delegated 
#   clients to obtain short-lived X.509 certificate credentials.  It does this
#   by using the Contrail Online CA package
#
# The %(here)s variable will be replaced with the parent directory of this file
#
[DEFAULT]
debug = true
# Uncomment and replace with the address which should receive any error reports
#email_to = you@yourdomain.com
smtp_server = localhost
error_email_from = paste@localhost

beakerSessionKeyName = beaker.session.oauth2server

[server:main]
use = egg:Paste#http
#host = 127.0.0.1
host = 0.0.0.0
port = 5000
ssl_pem = %(here)s/../shared_config/pki/host.pem

[pipeline:main]
pipeline = BeakerSessionFilter
           repoze_who
           AuthenticationFormFilter
           OAuth2AuthorisationFilter
           OAuth2ServerFilter
           OAuth2ResourceServerFilter
           OnlineCaFilterApp

# This filter sets up a server side session linked to a cookie.  The session
# caches authentication and authorisation state information
[filter:BeakerSessionFilter]
paste.filter_app_factory = beaker.middleware:SessionMiddleware

# Cookie name
beaker.session.key = ndg.oauth.server.session

# WSGI environ key name
environ_key = %(beakerSessionKeyName)s
beaker.session.secret = somesecret
#beaker.cache.data_dir = %(here)s/authn/beaker/cache
beaker.session.type = file
beaker.session.data_dir = %(here)s/authn/beaker/sessions

[filter:repoze_who]
use = egg:repoze.who#config
config_file = %(here)s/repoze_who.ini
log_file = stdout
log_level = debug

[filter:AuthenticationFormFilter]
paste.filter_app_factory = ndg.oauth.server.wsgi.authentication_filter:AuthenticationFormMiddleware.filter_app_factory
authenticationForm.base_url_path = /authentication
authenticationForm.client_register=%(here)s/client_register.ini
# If true, client authorization included on login form, otherwise the separate
# client authorization form is always used.
authenticationForm.combined_authorization = True
authenticationForm.login_cancelled = %(here)s/templates/login_cancelled.html
authenticationForm.login_form = %(here)s/templates/login_form.html
authenticationForm.return_url_param = returnurl
authenticationForm.session_key_name = %(beakerSessionKeyName)s
# Authentication form configuration
authenticationForm.layout.heading = OAuth Login
authenticationForm.layout.title = OAuth Login
authenticationForm.layout.rightLink = http://ceda.ac.uk/
authenticationForm.layout.rightImage = /layout/CEDA_RightButton60.png
authenticationForm.layout.rightAlt = Centre for Environmental Data Archival
authenticationForm.layout.footerText = This site is for test purposes only.
authenticationForm.layout.helpIcon = /layout/help.png

[filter:OAuth2AuthorisationFilter]
# Authorization filter configuration options - defaults are commented out.
paste.filter_app_factory = ndg.oauth.server.wsgi.authorization_filter:Oauth2AuthorizationMiddleware.filter_app_factory
oauth2authorization.base_url_path=/client_authorization
oauth2authorization.client_authorization_form=%(here)s/templates/auth_client_form.html
#oauth2authorization.client_authorizations_key=client_authorizations
oauth2authorization.client_register=%(here)s/client_register.ini
oauth2authorization.session_key_name = %(beakerSessionKeyName)s
#oauth2authorization.user_identifier_key=REMOTE_USER
# Authorization form configuration
oauth2authorization.layout.heading = OAuth Authorisation
oauth2authorization.layout.title = OAuth Authorisation
oauth2authorization.layout.rightLink = http://ceda.ac.uk/
oauth2authorization.layout.rightImage = /layout/CEDA_RightButton60.png
oauth2authorization.layout.rightAlt = Centre for Environmental Data Archival
oauth2authorization.layout.footerText = This site is for test purposes only.
oauth2authorization.layout.helpIcon = /layout/icons/help.png

[filter:OAuth2ServerFilter]
paste.filter_app_factory = ndg.oauth.server.wsgi.oauth2_server:Oauth2ServerMiddleware.filter_app_factory

# OAuth2 server configuration options - defaults are commented out.
#oauth2server.access_token_lifetime=86400
# Allowed values: slcs (returns a cert as access token) or bearer (which 
# returns a UUID).  bearer is the default
#oauth2server.access_token_type=slcs
#oauth2server.access_token_type=bearer
#oauth2server.authorization_grant_lifetime=600
oauth2server.base_url_path=/oauth
#oauth2server.certificate_request_parameter=certificate_request
# Allowed values: certificate (default) or none.
#oauth2server.client_authentication_method=certificate
oauth2server.client_authentication_method=none
#oauth2server.client_authorization_url=client_authorization/authorize
#oauth2server.client_authorizations_key=client_authorizations
oauth2server.client_register=%(here)s/client_register.ini
#oauth2server.session_key_name=beaker.session.oauth2server
#oauth2server.user_identifier_key=REMOTE_USER

# Configuration of access token cache
oauth2server.cache.accesstokenregister.expire=86400
oauth2server.cache.accesstokenregister.type=file
oauth2server.cache.accesstokenregister.data_dir=%(here)s/authn/accesstokenregister
# data_dir is used if lock_dir not set:
#oauth2server.cache.accesstokenregister.lock_dir

# Configuration of authorization grant cache
oauth2server.cache.authorizationgrantregister.expire=86400
oauth2server.cache.authorizationgrantregister.type=file
oauth2server.cache.authorizationgrantregister.data_dir=%(here)s/authn/authorizationgrantregister
# data_dir is used if lock_dir not set:
#oauth2server.cache.authorizationgrantregister.lock_dir

[filter:OAuth2ResourceServerFilter]
paste.filter_app_factory = ndg.oauth.server.wsgi.resource_server:Oauth2ResourceServerMiddleware.filter_app_factory
oauth2.resource_server.resource_uripaths: /certificate/
    
[app:OnlineCaApp]
paste.app_factory = onlineca.server.wsgi.app:OnlineCaApp.app_factory

# Set an alternative prefix for settings - default is 'onlineca.server.'
#prefix: online-ca.

# Path to CA Python class constructor or factory function
onlineca.server.ca_class_factory_path: onlineca.server.impl:CertificateAuthorityImpl

# onlineca.server.ca_class.* values correspond to settings for the CA class.
# The CA class is embedded into the online CA via an interface.  It is used to
# issue certificates. The settings below apply to the 
# ca.impl.CertificateAuthority class

# CA certificate file location
onlineca.server.ca_class.cert_filepath: %(here)s/test-ca.crt

# CA certificate private key file location
onlineca.server.ca_class.key_filepath: %(here)s/test-ca.key

# Password for CA private key file.  Omit this option if no password is set
#onlineca.server.ca_class.key_passwd:

# Default number of bits for key pair.  Certificate signing requests submitted
# with public keys with less than this minimum will be rejected.  The default is
# 2048
onlineca.server.min_key_nbits: 2048

# Template to set the form for the certificate subject name for output 
# certificates.  This can reference any key name set in environ - in this case,
# 'REMOTE_USER'
onlineca.server.cert_subject_name_template: /O=NDG/OU=Security/CN=$REMOTE_USER

# URI path for certificate issuing endpoint. e.g. if online ca app is mounted
# at https://myonlineca.somewhere.ac.uk/onlineca and issue_cert_uripath is
# /issue_cert/, then the full path would be, 
# 
# https://myonlineca.somewhere.ac.uk/onlineca/issue_cert/
#
# Default path is /certificate/
#onlineca.server.issue_cert_uripath: /issue-cert/

# URI path for trustroots retrieval endpoint.  The default path is
# /trustroots/
#onlineca.server.trustroots_uripath: /trusted-cas/

# Directory where trustroots should be read from and returned via the 
# trustroots call.  It is vital that this is path is carefully selected and 
# checked.
onlineca.server.trustroots_dir: %(here)s/ca/

[filter-app:OnlineCaFilterApp]
use = egg:Paste#httpexceptions
next = cascade

[composit:cascade]
use = egg:Paste#cascade
app1 = OnlineCaApp
app2 = StaticContent
catch = 404

[app:StaticContent]
use = egg:Paste#static
document_root = %(here)s/static


# Logging configuration
[loggers]
keys = root, routes, ndgoauthserver

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_routes]
level = INFO
handlers =
qualname = routes.middleware
# "level = DEBUG" logs the route matched and routing variables.

[logger_ndgoauthserver]
level = DEBUG
handlers =
qualname = ndg.oauth.server

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] [%(threadName)s] %(message)s
datefmt = %H:%M:%S
